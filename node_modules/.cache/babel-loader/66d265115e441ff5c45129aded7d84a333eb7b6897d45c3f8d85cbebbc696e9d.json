{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n//import tuits from './tuits.json';\nimport { findTuitsThunk } from \"../../services/tuits-thunks\";\nconst initialState = {\n  tuits: [],\n  loading: false\n};\nconst currentUser = {\n  \"userName\": \"NASA\",\n  \"handle\": \"@nasa\",\n  \"image\": \"nasa.png\"\n};\nconst templateTuit = {\n  ...currentUser,\n  \"topic\": \"Space\",\n  \"time\": \"2h\",\n  \"liked\": false,\n  \"replies\": 0,\n  \"retuits\": 0,\n  \"likes\": 0\n};\nconst tuitsSlice = createSlice({\n  name: 'tuits',\n  initialState: initialState,\n  extraReducers: {\n    [findTuitsThunk.pending]: state => {\n      state.loading = true;\n      state.tuits = [];\n    },\n    [findTuitsThunk.fulfilled]: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.loading = false;\n      state.tuits = payload;\n    },\n    [findTuitsThunk.rejected]: (state, action) => {\n      state.loading = false;\n      state.error = action.error;\n    }\n  },\n  reducers: {\n    deleteTuit(state, action) {\n      const index = state.findIndex(tuit => tuit._id === action.payload);\n      state.splice(index, 1);\n    },\n    createTuit(state, action) {\n      state.unshift({\n        ...action.payload,\n        ...templateTuit,\n        _id: new Date().getTime()\n      });\n    }\n  }\n});\nexport const {\n  createTuit,\n  deleteTuit\n} = tuitsSlice.actions;\nexport default tuitsSlice.reducer;","map":{"version":3,"names":["createSlice","findTuitsThunk","initialState","tuits","loading","currentUser","templateTuit","tuitsSlice","name","extraReducers","pending","state","fulfilled","payload","rejected","action","error","reducers","deleteTuit","index","findIndex","tuit","_id","splice","createTuit","unshift","Date","getTime","actions","reducer"],"sources":["/Users/arunkumarreddy/Documents/cs5610_7/2023/spring/webdev/tuiter-react-web-app/src/tuiter/tuits/tuits-reducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n//import tuits from './tuits.json';\nimport {findTuitsThunk}\n    from \"../../services/tuits-thunks\";\n\nconst initialState = {\n    tuits: [],\n    loading: false\n}\n\nconst currentUser = {\n    \"userName\": \"NASA\",\n    \"handle\": \"@nasa\",\n    \"image\": \"nasa.png\",\n};\n\nconst templateTuit = {\n    ...currentUser,\n    \"topic\": \"Space\",\n    \"time\": \"2h\",\n    \"liked\": false,\n    \"replies\": 0,\n    \"retuits\": 0,\n    \"likes\": 0,\n}\n\nconst tuitsSlice = createSlice({\n                                   name: 'tuits',\n                                   initialState: initialState,\n                                   extraReducers: {\n                                       [findTuitsThunk.pending]:\n                                           (state) => {\n                                               state.loading = true\n                                               state.tuits = []\n                                           },\n                                       [findTuitsThunk.fulfilled]:\n                                           (state, { payload }) => {\n                                               state.loading = false\n                                               state.tuits = payload\n                                           },\n                                       [findTuitsThunk.rejected]:\n                                           (state, action) => {\n                                               state.loading = false\n                                               state.error = action.error\n                                           }\n                                   },\n                                   reducers: {\n                                       deleteTuit(state, action) {\n                                           const index = state\n                                               .findIndex(tuit =>\n                                                              tuit._id === action.payload);\n                                           state.splice(index, 1);\n                                       },\n                                       createTuit(state, action) {\n                                           state.unshift({\n                                                             ...action.payload,\n                                                             ...templateTuit,\n                                                             _id: (new Date()).getTime(),\n                                                         })\n                                       }\n                                   }\n                               });\nexport const {createTuit, deleteTuit} = tuitsSlice.actions;\nexport default tuitsSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C;AACA,SAAQC,cAAc,QACb,6BAA6B;AAEtC,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAE,EAAE;EACTC,OAAO,EAAE;AACb,CAAC;AAED,MAAMC,WAAW,GAAG;EAChB,UAAU,EAAE,MAAM;EAClB,QAAQ,EAAE,OAAO;EACjB,OAAO,EAAE;AACb,CAAC;AAED,MAAMC,YAAY,GAAG;EACjB,GAAGD,WAAW;EACd,OAAO,EAAE,OAAO;EAChB,MAAM,EAAE,IAAI;EACZ,OAAO,EAAE,KAAK;EACd,SAAS,EAAE,CAAC;EACZ,SAAS,EAAE,CAAC;EACZ,OAAO,EAAE;AACb,CAAC;AAED,MAAME,UAAU,GAAGP,WAAW,CAAC;EACIQ,IAAI,EAAE,OAAO;EACbN,YAAY,EAAEA,YAAY;EAC1BO,aAAa,EAAE;IACX,CAACR,cAAc,CAACS,OAAO,GAClBC,KAAK,IAAK;MACPA,KAAK,CAACP,OAAO,GAAG,IAAI;MACpBO,KAAK,CAACR,KAAK,GAAG,EAAE;IACpB,CAAC;IACL,CAACF,cAAc,CAACW,SAAS,GACrB,CAACD,KAAK,WAAkB;MAAA,IAAhB;QAAEE;MAAQ,CAAC;MACfF,KAAK,CAACP,OAAO,GAAG,KAAK;MACrBO,KAAK,CAACR,KAAK,GAAGU,OAAO;IACzB,CAAC;IACL,CAACZ,cAAc,CAACa,QAAQ,GACpB,CAACH,KAAK,EAAEI,MAAM,KAAK;MACfJ,KAAK,CAACP,OAAO,GAAG,KAAK;MACrBO,KAAK,CAACK,KAAK,GAAGD,MAAM,CAACC,KAAK;IAC9B;EACR,CAAC;EACDC,QAAQ,EAAE;IACNC,UAAU,CAACP,KAAK,EAAEI,MAAM,EAAE;MACtB,MAAMI,KAAK,GAAGR,KAAK,CACdS,SAAS,CAACC,IAAI,IACAA,IAAI,CAACC,GAAG,KAAKP,MAAM,CAACF,OAAO,CAAC;MAC/CF,KAAK,CAACY,MAAM,CAACJ,KAAK,EAAE,CAAC,CAAC;IAC1B,CAAC;IACDK,UAAU,CAACb,KAAK,EAAEI,MAAM,EAAE;MACtBJ,KAAK,CAACc,OAAO,CAAC;QACI,GAAGV,MAAM,CAACF,OAAO;QACjB,GAAGP,YAAY;QACfgB,GAAG,EAAG,IAAII,IAAI,EAAE,CAAEC,OAAO;MAC7B,CAAC,CAAC;IACpB;EACJ;AACJ,CAAC,CAAC;AACjC,OAAO,MAAM;EAACH,UAAU;EAAEN;AAAU,CAAC,GAAGX,UAAU,CAACqB,OAAO;AAC1D,eAAerB,UAAU,CAACsB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}