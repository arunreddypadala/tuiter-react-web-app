{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n//import tuits from './tuits.json';\nimport { deleteTuitThunk, findTuitsThunk, createTuitThunk } from \"../../services/tuits-thunks\";\nconst initialState = {\n  tuits: [],\n  loading: false\n};\nconst currentUser = {\n  \"userName\": \"NASA\",\n  \"handle\": \"@nasa\",\n  \"image\": \"nasa.png\"\n};\nconst templateTuit = {\n  ...currentUser,\n  \"topic\": \"Space\",\n  \"time\": \"2h\",\n  \"liked\": false,\n  \"replies\": 0,\n  \"retuits\": 0,\n  \"likes\": 0\n};\nconst tuitsSlice = createSlice({\n  name: 'tuits',\n  initialState: initialState,\n  extraReducers: {\n    [findTuitsThunk.pending]: state => {\n      state.loading = true;\n      state.tuits = [];\n    },\n    [findTuitsThunk.fulfilled]: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.loading = false;\n      state.tuits = payload;\n    },\n    [findTuitsThunk.rejected]: (state, action) => {\n      state.loading = false;\n      state.error = action.error;\n    },\n    [deleteTuitThunk.fulfilled]: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.loading = false;\n      state.tuits = state.tuits.filter(t => t._id !== payload);\n    },\n    [createTuitThunk.fulfilled]: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      state.loading = false;\n      state.tuits.push(payload);\n    }\n  },\n  reducers: {\n    deleteTuit(state, action) {\n      const index = state.findIndex(tuit => tuit._id === action.payload);\n      state.splice(index, 1);\n    },\n    createTuit(state, action) {\n      state.unshift({\n        ...action.payload,\n        ...templateTuit,\n        _id: new Date().getTime()\n      });\n    }\n  }\n});\nexport const {\n  createTuit,\n  deleteTuit\n} = tuitsSlice.actions;\nexport default tuitsSlice.reducer;","map":{"version":3,"names":["createSlice","deleteTuitThunk","findTuitsThunk","createTuitThunk","initialState","tuits","loading","currentUser","templateTuit","tuitsSlice","name","extraReducers","pending","state","fulfilled","payload","rejected","action","error","filter","t","_id","push","reducers","deleteTuit","index","findIndex","tuit","splice","createTuit","unshift","Date","getTime","actions","reducer"],"sources":["/Users/arunkumarreddy/Documents/cs5610_7/2023/spring/webdev/tuiter-react-web-app/src/tuiter/tuits/tuits-reducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n//import tuits from './tuits.json';\nimport {deleteTuitThunk, findTuitsThunk, createTuitThunk}\n    from \"../../services/tuits-thunks\";\n\nconst initialState = {\n    tuits: [],\n    loading: false\n}\n\nconst currentUser = {\n    \"userName\": \"NASA\",\n    \"handle\": \"@nasa\",\n    \"image\": \"nasa.png\",\n};\n\nconst templateTuit = {\n    ...currentUser,\n    \"topic\": \"Space\",\n    \"time\": \"2h\",\n    \"liked\": false,\n    \"replies\": 0,\n    \"retuits\": 0,\n    \"likes\": 0,\n}\n\nconst tuitsSlice = createSlice({\n                                   name: 'tuits',\n                                   initialState: initialState,\n                                   extraReducers: {\n                                       [findTuitsThunk.pending]:\n                                           (state) => {\n                                               state.loading = true\n                                               state.tuits = []\n                                           },\n                                       [findTuitsThunk.fulfilled]:\n                                           (state, { payload }) => {\n                                               state.loading = false\n                                               state.tuits = payload\n                                           },\n                                       [findTuitsThunk.rejected]:\n                                           (state, action) => {\n                                               state.loading = false\n                                               state.error = action.error\n                                           },\n                                       [deleteTuitThunk.fulfilled] :\n                                           (state, { payload }) => {\n                                               state.loading = false\n                                               state.tuits = state.tuits\n                                                   .filter(t => t._id !== payload)\n                                           },\n\n                                       [createTuitThunk.fulfilled]:\n                                           (state, { payload }) => {\n                                               state.loading = false\n                                               state.tuits.push(payload)\n                                           },\n\n                                   },\n                                   reducers: {\n                                       deleteTuit(state, action) {\n                                           const index = state\n                                               .findIndex(tuit =>\n                                                              tuit._id === action.payload);\n                                           state.splice(index, 1);\n                                       },\n                                       createTuit(state, action) {\n                                           state.unshift({\n                                                             ...action.payload,\n                                                             ...templateTuit,\n                                                             _id: (new Date()).getTime(),\n                                                         })\n                                       }\n                                   }\n                               });\nexport const {createTuit, deleteTuit} = tuitsSlice.actions;\nexport default tuitsSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C;AACA,SAAQC,eAAe,EAAEC,cAAc,EAAEC,eAAe,QAC/C,6BAA6B;AAEtC,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAE,EAAE;EACTC,OAAO,EAAE;AACb,CAAC;AAED,MAAMC,WAAW,GAAG;EAChB,UAAU,EAAE,MAAM;EAClB,QAAQ,EAAE,OAAO;EACjB,OAAO,EAAE;AACb,CAAC;AAED,MAAMC,YAAY,GAAG;EACjB,GAAGD,WAAW;EACd,OAAO,EAAE,OAAO;EAChB,MAAM,EAAE,IAAI;EACZ,OAAO,EAAE,KAAK;EACd,SAAS,EAAE,CAAC;EACZ,SAAS,EAAE,CAAC;EACZ,OAAO,EAAE;AACb,CAAC;AAED,MAAME,UAAU,GAAGT,WAAW,CAAC;EACIU,IAAI,EAAE,OAAO;EACbN,YAAY,EAAEA,YAAY;EAC1BO,aAAa,EAAE;IACX,CAACT,cAAc,CAACU,OAAO,GAClBC,KAAK,IAAK;MACPA,KAAK,CAACP,OAAO,GAAG,IAAI;MACpBO,KAAK,CAACR,KAAK,GAAG,EAAE;IACpB,CAAC;IACL,CAACH,cAAc,CAACY,SAAS,GACrB,CAACD,KAAK,WAAkB;MAAA,IAAhB;QAAEE;MAAQ,CAAC;MACfF,KAAK,CAACP,OAAO,GAAG,KAAK;MACrBO,KAAK,CAACR,KAAK,GAAGU,OAAO;IACzB,CAAC;IACL,CAACb,cAAc,CAACc,QAAQ,GACpB,CAACH,KAAK,EAAEI,MAAM,KAAK;MACfJ,KAAK,CAACP,OAAO,GAAG,KAAK;MACrBO,KAAK,CAACK,KAAK,GAAGD,MAAM,CAACC,KAAK;IAC9B,CAAC;IACL,CAACjB,eAAe,CAACa,SAAS,GACtB,CAACD,KAAK,YAAkB;MAAA,IAAhB;QAAEE;MAAQ,CAAC;MACfF,KAAK,CAACP,OAAO,GAAG,KAAK;MACrBO,KAAK,CAACR,KAAK,GAAGQ,KAAK,CAACR,KAAK,CACpBc,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKN,OAAO,CAAC;IACvC,CAAC;IAEL,CAACZ,eAAe,CAACW,SAAS,GACtB,CAACD,KAAK,YAAkB;MAAA,IAAhB;QAAEE;MAAQ,CAAC;MACfF,KAAK,CAACP,OAAO,GAAG,KAAK;MACrBO,KAAK,CAACR,KAAK,CAACiB,IAAI,CAACP,OAAO,CAAC;IAC7B;EAER,CAAC;EACDQ,QAAQ,EAAE;IACNC,UAAU,CAACX,KAAK,EAAEI,MAAM,EAAE;MACtB,MAAMQ,KAAK,GAAGZ,KAAK,CACda,SAAS,CAACC,IAAI,IACAA,IAAI,CAACN,GAAG,KAAKJ,MAAM,CAACF,OAAO,CAAC;MAC/CF,KAAK,CAACe,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;IAC1B,CAAC;IACDI,UAAU,CAAChB,KAAK,EAAEI,MAAM,EAAE;MACtBJ,KAAK,CAACiB,OAAO,CAAC;QACI,GAAGb,MAAM,CAACF,OAAO;QACjB,GAAGP,YAAY;QACfa,GAAG,EAAG,IAAIU,IAAI,EAAE,CAAEC,OAAO;MAC7B,CAAC,CAAC;IACpB;EACJ;AACJ,CAAC,CAAC;AACjC,OAAO,MAAM;EAACH,UAAU;EAAEL;AAAU,CAAC,GAAGf,UAAU,CAACwB,OAAO;AAC1D,eAAexB,UAAU,CAACyB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}